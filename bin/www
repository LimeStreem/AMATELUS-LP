#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('amatelus-lp:server');
var http = require('http');
var fs = require('fs');
var https = require('https');
var folder = require('path').dirname(require.main.filename);

var caCert;
if (process.env.LP_CA_CERT) {
  caCert = fs.readFileSync(process.env.LP_CA_CERT || folder + '/ssl_cert/ca.crt');
}

var sslOptions = {
  key: fs.readFileSync(process.env.LP_CERT_KEY || folder + '/ssl_cert/server_key.pem'),
  cert: fs.readFileSync(process.env.LP_CERT || folder + '/ssl_cert/server_crt.pem'),
  ca: caCert,
  requestCert: false,
  rejectUnauthorized: false,
  passphrase: process.env.LP_PASS
};


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT_HTTPS || '443');
var portUnSecure = normalizePort(process.env.PORT_HTTP || '80');
console.log("Now server is runnning on PORT:" + port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(sslOptions, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, onListening);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var redirectServer = http.createServer((req, res) => {
  res.writeHead(301, {
    Location: "https://" + process.env.DOMAIN + req.url
  });
  res.end();
}).listen(portUnSecure);
